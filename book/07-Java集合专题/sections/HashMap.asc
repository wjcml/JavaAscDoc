=== HashMap

==== HashMap的特点

HashMap 是以 *键值对* 的形式存储数据的，*线程不安全*。

HashMap 可以存储 *null* 的 *key* 和 *value*，但 null 作为键只能有一个，null 作为值可以有多个。

HashMap 在 *JDK 1.8* 底层采用的是 *数组 + 链表/红黑树* 结构。数组是 *Node<K, V>[]* 。



==== HashMap的底层结构

HashMap 在 *JDK 1.8* 底层采用的是 *数组 + 链表/红黑树* 结构。在 *JDK 1.7* 以前(包括1.7) 采用的是 *数组 + 链表*，采用 *数组 + 链表/红黑树* 结构，可以减少搜索时间。

image::HashMap数据结构(JAVA8).png[]

在 HashMap 中，链表和红黑树分别由 HashMap 的两个内部类 *Node<K,V>* 和 *TreeNode<K,V>* 组成。


*Node<K, V> 源码*
[source, java]
----
// 继承自 Map.Entry<K,V>
static class Node<K,V> implements Map.Entry<K,V> {
    final int hash;// 哈希值，存放元素到hashmap中时用来与其他元素hash值比较
    final K key;//键
    V value;//值
    // 指向下一个节点
    Node<K,V> next;
    Node(int hash, K key, V value, Node<K,V> next) {
        this.hash = hash;
        this.key = key;
        this.value = value;
        this.next = next;
    }

    // 省略部分代码
    ......
        
}
----

TreeNode 继承自 LinkedHashMap.Entry，实际上，LinkedHashMap.Entry 继承自 HashMap.Node，所以说，TreeNode 也属于 Node 的子类。

*TreeNode<K, V> 源码*
[source, java]
----
static final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {
    TreeNode<K,V> parent;  // 父
    TreeNode<K,V> left;    // 左
    TreeNode<K,V> right;   // 右
    TreeNode<K,V> prev;    // needed to unlink next upon deletion
    boolean red;           // 判断颜色
    TreeNode(int hash, K key, V val, Node<K,V> next) {
        super(hash, key, val, next);
    }
    // 返回根节点
    final TreeNode<K,V> root() {
        for (TreeNode<K,V> r = this, p;;) {
            if ((p = r.parent) == null)
                return r;
            r = p;
    }
}
----

image::HashMap的put方法流程(JAVA8).png[]



=== HashMap

==== HashMap的特点

HashMap 是以 *键值对* 的形式存储数据的，*线程不安全*。

HashMap 可以存储 *null* 的 *key* 和 *value*，但 null 作为键只能有一个，null 作为值可以有多个。

HashMap 在 *JDK 1.8* 底层采用的是 *数组 + 链表/红黑树* 结构。数组是 *Node<K, V>[]* 。

==== Java8 HashMap的类属性

[source, java]
----
public class HashMap<K,V> extends AbstractMap<K,V> 
            implements Map<K,V>, Cloneable, Serializable {
    // 序列号
    private static final long serialVersionUID = 362498820763181265L;
    // 默认的初始容量是16
    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;
    // 最大容量
    static final int MAXIMUM_CAPACITY = 1 << 30;
    // 默认的填充因子
    static final float DEFAULT_LOAD_FACTOR = 0.75f;
    // 当桶(bucket)上的结点数大于这个值时会转成红黑树
    static final int TREEIFY_THRESHOLD = 8;
    // 当桶(bucket)上的结点数小于这个值时树转链表
    static final int UNTREEIFY_THRESHOLD = 6;
    // 桶中结构转化为红黑树对应的table的最小大小
    static final int MIN_TREEIFY_CAPACITY = 64;
    // 存储元素的数组，总是2的幂次倍
    transient Node<k,v>[] table;
    // 存放具体元素的集
    transient Set<map.entry<k,v>> entrySet;
    // 存放元素的个数，注意这个不等于数组的长度。
    transient int size;
    // 每次扩容和更改map结构的计数器
    transient int modCount;
    // 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容
    int threshold;
    // 加载因子
    final float loadFactor;
}

----



==== HashMap的底层结构

HashMap 在 *JDK 1.8* 底层采用的是 *数组 + 链表/红黑树* 结构。在 *JDK 1.7* 以前(包括1.7) 采用的是 *数组 + 链表*，采用 *数组 + 链表/红黑树* 结构，可以减少搜索时间。

image::HashMap数据结构(JAVA8).png[]

在 HashMap 中，链表和红黑树分别由 HashMap 的两个内部类 *Node<K,V>* 和 *TreeNode<K,V>* 组成。


*Node<K, V> 源码*
[source, java]
----
// 继承自 Map.Entry<K,V>
static class Node<K,V> implements Map.Entry<K,V> {
    final int hash;// 哈希值，存放元素到hashmap中时用来与其他元素hash值比较
    final K key;//键
    V value;//值
    // 指向下一个节点
    Node<K,V> next;
    Node(int hash, K key, V value, Node<K,V> next) {
        this.hash = hash;
        this.key = key;
        this.value = value;
        this.next = next;
    }

    // 省略部分代码
    ......
        
}
----

TreeNode 继承自 LinkedHashMap.Entry，实际上，LinkedHashMap.Entry 继承自 HashMap.Node，所以说，TreeNode 也属于 Node 的子类。

*TreeNode<K, V> 源码*
[source, java]
----
static final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {
    TreeNode<K,V> parent;  // 父
    TreeNode<K,V> left;    // 左
    TreeNode<K,V> right;   // 右
    TreeNode<K,V> prev;    // needed to unlink next upon deletion
    boolean red;           // 判断颜色
    TreeNode(int hash, K key, V val, Node<K,V> next) {
        super(hash, key, val, next);
    }
    // 返回根节点
    final TreeNode<K,V> root() {
        for (TreeNode<K,V> r = this, p;;) {
            if ((p = r.parent) == null)
                return r;
            r = p;
    }
}
----


==== HashMap之put方法

在 HashMap 中，通过put方法来添加元素。我们首先根据下图来分析一下 HashMap 添加元素的逻辑。

image::hashMap的put方法流程(JAVA8).png[]

. 判断 *table* 是否为空或者长度为0，是就执行 resize()
. 计算 *hash*，如果定位到的位置没有元素，就直接插入
. 与定位到元素进行 key 比较，如果 key 相同，就覆盖元素值。
. 桶是否为树结构，如果是树结构，就采用 *红黑树* 插入；如果是链表结构，就循环遍历，并判断 key 是否相等，如果相等就替换，遍历到了末尾的话，就插入到最后，然后判断是否需要转化为红黑树


下面是 HashMap 的 put 方法源码：

[source, java]
----
public V put(K key, V value) {
    return putVal(hash(key), key, value, false, true);
}

final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
    Node<K,V>[] tab; Node<K,V> p; int n, i;
    // table未初始化或者长度为0，进行扩容
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;
    // (n - 1) & hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)
    if ((p = tab[i = (n - 1) & hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    // 桶中已经存在元素
    else {
        Node<K,V> e; K k;
        // 比较桶中第一个元素(数组中的结点)的hash值相等，key相等
        if (p.hash == hash &&
            ((k = p.key) == key || (key != null && key.equals(k))))
                // 将第一个元素赋值给e，用e来记录
                e = p;
        // hash值不相等，即key不相等；为红黑树结点
        else if (p instanceof TreeNode)
            // 放入树中
            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
        // 为链表结点
        else {
            // 在链表最末插入结点
            for (int binCount = 0; ; ++binCount) {
                // 到达链表的尾部
                if ((e = p.next) == null) {
                    // 在尾部插入新结点
                    p.next = newNode(hash, key, value, null);
                    // 结点数量达到阈值(默认为 8 )，执行 treeifyBin 方法
                    // 这个方法会根据 HashMap 数组来决定是否转换为红黑树。
                    // 只有当数组长度大于或者等于 64 的情况下，才会执行转换红黑树操作，以减少搜索时间。否则，就是只是对数组扩容。
                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    // 跳出循环
                    break;
                }
                // 判断链表中结点的key值与插入的元素的key值是否相等
                if (e.hash == hash &&
                    ((k = e.key) == key || (key != null && key.equals(k))))
                    // 相等，跳出循环
                    break;
                // 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表
                p = e;
            }
        }
        // 表示在桶中找到key值、hash值与插入元素相等的结点
        if (e != null) {
            // 记录e的value
            V oldValue = e.value;
            // onlyIfAbsent为false或者旧值为null
            if (!onlyIfAbsent || oldValue == null)
                //用新值替换旧值
                e.value = value;
            // 访问后回调
            afterNodeAccess(e);
            // 返回旧值
            return oldValue;
        }
    }
    // 结构性修改
    ++modCount;
    // 实际大小大于阈值则扩容
    if (++size > threshold)
        resize();
    // 插入后回调
    afterNodeInsertion(evict);
    return null;
}

----

==== HashMap之resize方法

进行扩容，会伴随着一次重新 hash 分配，并且会遍历 hash 表中所有的元素，是非常耗时的。在编写程序中，要尽量避免 resize。

这里就不贴代码了，如果需要看代码，可以访问 https://snailclimb.gitee.io/javaguide/#/docs/java/collection/HashMap(JDK1.8)%E6%BA%90%E7%A0%81+%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90["JavaGuide之HashMap解析", window="_blank"]


==== 为什么hashMap线程不安全？

. 如果多个线程对hashMap操作，又对同一个数组位置进行插入操作，会造成数据丢失。假设两个线程A、B都在进行put操作，并且hash函数计算出的插入下标是相同的，A执行完Hash碰撞后因为时间片耗尽被挂起，B插入了数据，而A获得时间片，因为A已经执行过hash碰撞了，所以直接插入，就会覆盖B的数据
. hashMap执行扩容方法，会生成一个新的容量数组，将旧的数组的所有键值对重新计算写入新数组，之后指向新数组。假设多个线程同时检测到超过阈值，需要扩容，那么就都会遍历所有元素生成新的数组，然后让 table 指向生成的新数组，那么只有最后一个线程生成的新数组会被赋值给 table，其他线程数据都会丢失。




==== HashMap的几种遍历方式

参考文档： https://mp.weixin.qq.com/s/zQBN3UvJDhRTKP6SzcZFKw["HashMap 的 7 种遍历方式与性能分析！「修正篇」", window="_blank"]

. 迭代器（Iterator）方式遍历；
. For Each 方式遍历；
. Lambda 表达式遍历（JDK 1.8+）;
. Streams API 遍历（JDK 1.8+）。




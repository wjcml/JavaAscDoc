=== ArrayList
以下分析都是在 *Java 8* 的情况下。

*ArrayList* 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。

*ArrayList* 是 *List* 的主要实现类，底层使用 *Object[]* 存储，适用于频繁的查找工作，线程不安全。


==== ArrayList构造方法和源码

[source, java]
----
public class ArrayList<E> extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable{
    private static final long serialVersionUID = 8683452581122892189L;

    /**默认初始容量大小*/
    private static final int DEFAULT_CAPACITY = 10;
    /**空数组（用于空实例）*/
    private static final Object[] EMPTY_ELEMENTDATA = {};
    /**用于默认大小空实例的共享空数组实例。
    *我们把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少。*/
    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};
    /**保存ArrayList数据的数组*/
    transient Object[] elementData; // non-private to simplify nested class access
    /**ArrayList 所包含的元素个数*/
    private int size;

    /**带初始容量参数的构造函数（用户可以在创建ArrayList对象时自己指定集合的初始大小）*/
    public ArrayList(int initialCapacity) {
        if (initialCapacity > 0) {
            //如果传入的参数大于0，创建initialCapacity大小的数组
            this.elementData = new Object[initialCapacity];
        } else if (initialCapacity == 0) {
            //如果传入的参数等于0，创建空数组
            this.elementData = EMPTY_ELEMENTDATA;
        } else {
            //其他情况，抛出异常
            throw new IllegalArgumentException("Illegal Capacity: "+
                                               initialCapacity);
        }
    }

    /**默认无参构造函数
     *DEFAULTCAPACITY_EMPTY_ELEMENTDATA 为0.初始化为10，也就是说初始其实是空数组 当添加第一个元素的时候数组容量才变成10
     */
    public ArrayList() {
        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
    }

    /**
    *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回
    *如果指定的集合为null，throws NullPointerException。
    */
    public ArrayList(Collection<? extends E> c) {
        //将指定集合转换为数组
        elementData = c.toArray();
        //如果elementData数组的长度不为0
        if ((size = elementData.length) != 0) {
            // 如果elementData不是Object类型数据（c.toArray可能返回的不是Object类型的数组所以加上下面的语句用于判断）
            if (elementData.getClass() != Object[].class)
                //将原来不是Object类型的elementData数组的内容，赋值给新的Object类型的elementData数组
                elementData = Arrays.copyOf(elementData, size, Object[].class);
        } else {
            // 其他情况，用空数组代替
            this.elementData = EMPTY_ELEMENTDATA;
        }
    }

    // 省略方法
    ......
}
----

*ArrayList* 在初始化的时候，如果没有指定初始化大小，就会使用默认的空数组 *DEFAULTCAPACITY_EMPTY_ELEMENTDATA*，也就是 Object[0]；如果指定了大小，就会创建指定大小的数组。

如果采用 ArrayList 的无参构造方法进行初始化的话，是一个 *空数组*，并没有使用默认的初始容量大小 *int DEFAULT_CAPACITY = 10*；这是因为，在真正添加元素的时候（add()方法），才会将设置数组大小。接下来，我们看一下 ArrayList 的扩容机制。


==== ArrayList扩容机制

===== add 方法

[source, java]
----
/**
* 将指定的元素追加到此列表的末尾。
*/
public boolean add(E e) {
    //添加元素之前，先调用ensureCapacityInternal方法
    ensureCapacityInternal(size + 1);  // Increments modCount!!
    //这里看到ArrayList添加元素的实质就相当于为数组赋值
    elementData[size++] = e;
    return true;
}
----

===== ensureCapacityInternal 方法 和 ensureExplicitCapacity 方法

[source, java]
----
//得到最小扩容量，minCapacity = size + 1
private void ensureCapacityInternal(int minCapacity) {
    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
        // 获取默认的容量和传入参数的较大值
        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);
    }

    ensureExplicitCapacity(minCapacity);
}

//判断是否需要扩容
private void ensureExplicitCapacity(int minCapacity) {
    modCount++;

    // 判断需要的大小是否大于当前数组的容量，如果容量不够，就需要扩容了
    if (minCapacity - elementData.length > 0)
        //调用grow方法进行扩容，调用此方法代表已经开始扩容了
        grow(minCapacity);
}
----

我们来仔细分析一下：

- 当我们要 add 进第 1 个元素到 ArrayList 时，*elementData.length* 为 0 （因为还是一个空的 list），因为执行了 *ensureCapacityInternal()* 方法 ，所以 *minCapacity* 此时为 *10*。此时，*minCapacity - elementData.length > 0* 成立，所以会进入 *grow(minCapacity)* 方法。
- 当 add 第 2 个元素时，*minCapacity* 为 2，此时 *elementData.length(容量)* 在添加第一个元素后扩容成 10 了。此时，*minCapacity - elementData.length > 0* 不成立，所以不会进入 （执行）*grow(minCapacity)* 方法。
- 添加第 3、4···到第 10 个元素时，依然不会执行 *grow* 方法，数组容量都为 10。
- 直到添加第 11 个元素，*minCapacity* (为 11) 比 *elementData.length*（为 10）要大。进入 *grow* 方法进行扩容。

===== grow 方法

[source, java]
----
/**
* 要分配的最大数组大小
*/
private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

/**
* ArrayList扩容的核心方法。
*/
private void grow(int minCapacity) {
    // oldCapacity为旧容量，newCapacity为新容量
    int oldCapacity = elementData.length;
    //将oldCapacity 右移一位，其效果相当于oldCapacity /2，
    //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，
    int newCapacity = oldCapacity + (oldCapacity >> 1);
    //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，
    if (newCapacity - minCapacity < 0)
        newCapacity = minCapacity;
    // 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，
    //如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。
    if (newCapacity - MAX_ARRAY_SIZE > 0)
        newCapacity = hugeCapacity(minCapacity);
    // minCapacity is usually close to size, so this is a win:
    elementData = Arrays.copyOf(elementData, newCapacity);
}
----

[NOTE]
通过这一句 int newCapacity = oldCapacity + (oldCapacity >> 1); 可以看出，每次扩容为上一次的 1.5 倍。




=== ConcurrentHashMap

既然 HashMap 是线程不安全的，那么我们需要多线程操作的时候该怎么办呢，Java 提供了一个 ConcurrentHashMap 来进行操作。

*Java7* 中 ConcurrentHashMap 使用的 *分段锁*，也就是每一个 Segment 上同时只有一个线程可以操作，每一个 Segment 都是一个类似 HashMap 数组的结构，它可以扩容，它的冲突会转化为链表。但是 Segment 的个数一但初始化就不能改变。

*Java8* 中的 ConcurrentHashMap 使用的 *Synchronized 锁 + CAS 的机制*。结构也由 Java7 中的 *Segment 数组 + HashEntry 数组 + 链表* 进化成了 *Node 数组 + 链表 / 红黑树*，Node 是类似于一个 HashEntry 的结构。它的冲突再达到一定大小时会转化成红黑树，在冲突小于一定数量时又退回链表。

==== 存储结构

在 JDK 1.7 中, ConcurrentHashMap 的存储结构是 *Segment 数组 + HashEntry 数组 + 链表*，在 JDK 1.8 中，ConcurrentHashMap 的存储结构和 JDK 1.8 中的 HashMap 的数据结构是一样的，采用 *Node 数组 + 链表 / 红黑树*。



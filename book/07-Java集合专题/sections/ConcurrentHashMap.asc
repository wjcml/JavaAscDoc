=== ConcurrentHashMap

既然 HashMap 是线程不安全的，那么我们需要多线程操作的时候该怎么办呢，Java 提供了一个 ConcurrentHashMap 来进行操作。

*Java7* 中 ConcurrentHashMap 使用的 *分段锁*，也就是每一个 Segment 上同时只有一个线程可以操作，每一个 Segment 都是一个类似 HashMap 数组的结构，它可以扩容，它的冲突会转化为链表。但是 Segment 的个数一但初始化就不能改变。

*Java8* 中的 ConcurrentHashMap 使用的 *Synchronized 锁 + CAS 的机制*。结构也由 Java7 中的 *Segment 数组 + HashEntry 数组 + 链表* 进化成了 *Node 数组 + 链表 / 红黑树*，Node 是类似于一个 HashEntry 的结构。它的冲突再达到一定大小时会转化成红黑树，在冲突小于一定数量时又退回链表。

==== 存储结构

在 JDK 1.7 中, ConcurrentHashMap 的存储结构是 *Segment 数组 + HashEntry 数组 + 链表*，在 JDK 1.8 中，ConcurrentHashMap 的存储结构和 JDK 1.8 中的 HashMap 的数据结构是一样的，采用 *Node 数组 + 链表 / 红黑树*。


==== ConcurrentHashMap之put方法

ConcurrentHashMap 的 put 方法主要通过 *Synchronized 锁 + CAS 的机制* 的方式实现了线程安全，*自旋* 保证操作成功，下面是 ConcurrentHashMap 的 put 方法的流程图：

image::ConcurrentHashMap之put方法.png[]

*put 方法步骤*：

. 根据 key 计算出 hashcode 。
. 判断是否需要进行初始化。
. 即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。
. 如果当前位置的 hashcode == MOVED == -1,则需要进行扩容。
. 如果都不满足，则利用 synchronized 锁写入数据。
. 如果数量大于 8 则要转换为红黑树。

*put方法源码*

[source, java]
----
public V put(K key, V value) {
    return putVal(key, value, false);
}

/** Implementation for put and putIfAbsent */
final V putVal(K key, V value, boolean onlyIfAbsent) {
    // key 和 value 不能为空
    if (key == null || value == null) throw new NullPointerException();
    int hash = spread(key.hashCode());
    int binCount = 0;
    for (Node<K,V>[] tab = table;;) {
        // f = 目标位置元素
        Node<K,V> f; int n, i, fh;// fh 后面存放目标位置的元素 hash 值
        if (tab == null || (n = tab.length) == 0)
            // 数组桶为空，初始化数组桶（自旋+CAS)
            tab = initTable();
        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {
            // 桶内为空，CAS 放入，不加锁，成功了就直接 break 跳出
            if (casTabAt(tab, i, null,new Node<K,V>(hash, key, value, null)))
                break;  // no lock when adding to empty bin
        }
        else if ((fh = f.hash) == MOVED)
            tab = helpTransfer(tab, f);
        else {
            V oldVal = null;
            // 使用 synchronized 加锁加入节点
            synchronized (f) {
                if (tabAt(tab, i) == f) {
                    // 说明是链表
                    if (fh >= 0) {
                        binCount = 1;
                        // 循环加入新的或者覆盖节点
                        for (Node<K,V> e = f;; ++binCount) {
                            K ek;
                            if (e.hash == hash &&
                                ((ek = e.key) == key ||
                                 (ek != null && key.equals(ek)))) {
                                oldVal = e.val;
                                if (!onlyIfAbsent)
                                    e.val = value;
                                break;
                            }
                            Node<K,V> pred = e;
                            if ((e = e.next) == null) {
                                pred.next = new Node<K,V>(hash, key,
                                                          value, null);
                                break;
                            }
                        }
                    }
                    else if (f instanceof TreeBin) {
                        // 红黑树
                        Node<K,V> p;
                        binCount = 2;
                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,
                                                       value)) != null) {
                            oldVal = p.val;
                            if (!onlyIfAbsent)
                                p.val = value;
                        }
                    }
                }
            }
            if (binCount != 0) {
                if (binCount >= TREEIFY_THRESHOLD)
                    treeifyBin(tab, i);
                if (oldVal != null)
                    return oldVal;
                break;
            }
        }
    }
    addCount(1L, binCount);
    return null;
}
----


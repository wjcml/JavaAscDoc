=== 线程的创建方式

.方式一：Thread
[source,java]
----
public class NewThread extends Thread {
    public void run() {
        System.out.println("通过继承Thread类实现");
    }
}

new Thread（new NewThread()).start();
----

.方式二：Runable
[source,java]
----
public class NewThread implements Runnable {
    public void run() {
        System.out.println("通过实现Runable接口实现");
    }
}

new Thread（new NewThread()).start();
----

.方式三：ExecutorService、Callable<Class>、Future (子线程会有返回值)
[source,java]
----
public class Test {
    public static void main(String[] args) {
        // 线程池
        ExecutorService executor = Executors.newCachedThreadPool();
        Task task = new Task();
        // 执行任务并获取 Future 对象
        Future<String> future = executor.submit(task);
        // 关闭线程池
        executor.shutdown();
         
        System.out.println("当前为主线程");
         
        try {
            // 获取子线程返回值
            System.out.println(future.get());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }
         
        System.out.println("所有任务执行完毕");
    }
}

class Task implements Callable<String>{
    @Override
    public String call() throws Exception {
        return "子线程返回值";
    }
}
----

[NOTE]
通过 `Callable` 创建新线程，一般是和 `ExecutorService` 配合来使用的


.方式四：基于线程池的方式

[source,java]
----
// 创建线程池
ExecutorService threadPool = Executors.newFixedThreadPool(10);
while(true) {
    // 提交多个线程任务,并执行
    threadPool.execute(new Runnable() { 
        @Override
        public void run() {
            System.out.println(Thread.currentThread().getName() + " is running ..");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
            }
        }
    });
}
----

[TIP]
 `为什么推荐采用线程池的方式` ： + 
线程和数据库连接的  `创建`  和  `销毁`  都是非常浪费资源的，使用线程池避免了频繁的创建和销毁。



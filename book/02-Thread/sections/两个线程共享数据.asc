=== 两个线程共享数据

==== volatile
----
其一是保证该变量对所有线程可见,这里的可见性指的是当一个线程修改了变量的值,那么新的值对于其他线程是可以立即获取的。
----

==== synchronized
----
1.利用锁的机制来实现同步的 + 
2.在同一时间只允许一个线程持有某个对象锁,保证同一时间只有一个线程对需同步的代码块(复合操作)进行访问
----

==== Runnable 对象作为一个类的内部类
将 Runnable 对象作为一个类的内部类,共享数据作为这个类的成员变量,每个线程对共享数据的操作方法也封装在外部类,以便实现对数据的各个操作的同步和互斥, `作为内部类的各个 Runnable 对象调用外部类的这些方法`

[source, java]
----
public class MyData {
    private int j=0;
    public synchronized void add(){
        j++;
        System.out.println("线程"+Thread.currentThread().getName()+"j 为:"+j);
    }

    public synchronized void dec(){
        j--;
        System.out.println("线程"+Thread.currentThread().getName()+"j 为:"+j);
    }

    public int getData(){
        return j;
    }
}
public class TestThread {
    public static void main(String[] args) {
        MyData data = new MyData();
        for(int i=0;i<2;i++){
            new Thread(new Runnable(){
                public void run() {
                    data.add();
                }
            }).start();

            new Thread(new Runnable(){
                public void run() {}
            }).start();
        }
    }
}
----


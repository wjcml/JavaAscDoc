=== ThreadLocal 作用(线程本地存储)

最常见的 ThreadLocal 使用场景为：

- 用来解决 数据库连接、Session 管理等。
- 还可以保存针对某个线程的所有输出日志，然后统一保存日志，比如说定时任务日志。


ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储，ThreadLocal 的作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。


==== ThreadLocal结构

在 ThreadLocal 中，有一个内部类 *ThreadLocalMap*。ThreadLocalMap 中定义了一个 *Entry 数组*。

*Thread* 类有一个类型为 *ThreadLocal.ThreadLocalMap* 的实例变量 *threadLocals*，也就是说每个线程有一个自己的 *ThreadLocalMap*。

*ThreadLocalMap* 有自己的独立实现，可以简单地将它的 *key* 视作 *ThreadLocal*，*value* 为代码中放入的值（实际上 *key* 并不是 *ThreadLocal* 本身，而是它的一个 *弱引用*）。

每个线程在往 *ThreadLocal* 里放值的时候，都会先获取当前线程的 *ThreadLocalMap*，然后往自己的 *ThreadLocalMap* 里存，读也是以 *ThreadLocal* 作为引用，在自己的 *map* 里找对应的 *key*，从而实现了 *线程隔离*。

我们还要注意 *Entry*， 它的 *key* 是 *ThreadLocal<?> k* ，继承自 *WeakReference*， 也就是我们常说的 *弱引用类型*。


==== ThreadLocal父子线程数据传递方案

===== 子线程能否直接拿到父线程ThreadLocal中的值？

*答案：不能*

由于ThreadLocal的实现机制，在子线程中调用get时，我们拿到的Thread对象是当前子线程对象，所以在调用 get 方法时，得到的是 null。

===== InheritableThreadLocal

既然我们在子线程中不能通过 *ThreadLocal* 的 *get()* 直接获取到父线程中的值，那么有什么办法去解决这样的问题呢，毕竟有时候我们又有这样的需求。答案就是使用 *InheritableThreadLocal*。


[source, java]
----
public class InheritableThreadLocal<T> extends ThreadLocal<T> {
    /**
     * Computes the child's initial value for this inheritable thread-local
     * variable as a function of the parent's value at the time the child
     * thread is created.  This method is called from within the parent
     * thread before the child is started.
     * <p>
     * This method merely returns its input argument, and should be overridden
     * if a different behavior is desired.
     *
     * @param parentValue the parent thread's value
     * @return the child thread's initial value
     */
    protected T childValue(T parentValue) {
        return parentValue;
    }

    /**
     * Get the map associated with a ThreadLocal.
     *
     * @param t the current thread
     */
    ThreadLocalMap getMap(Thread t) {
       return t.inheritableThreadLocals;
    }

    /**
     * Create the map associated with a ThreadLocal.
     *
     * @param t the current thread
     * @param firstValue value for the initial entry of the table.
     */
    void createMap(Thread t, T firstValue) {
        t.inheritableThreadLocals = new ThreadLocalMap(this, firstValue);
    }
}
----




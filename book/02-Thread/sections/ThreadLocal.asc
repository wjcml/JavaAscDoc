=== ThreadLocal 作用(线程本地存储)

最常见的 ThreadLocal 使用场景为：

- 用来解决 数据库连接、Session 管理等。
- 记录当前登录用户信息。
- 还可以保存针对某个线程的所有输出日志，然后统一保存日志，比如说定时任务日志。


ThreadLocal，很多地方叫做 *线程本地变量*，也有些地方叫做线程本地存储，ThreadLocal 的作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。


==== ThreadLocal结构

在 ThreadLocal 中，有一个内部类 *ThreadLocalMap*。ThreadLocalMap 中定义了一个 *Entry 数组*。

*Thread* 类有一个类型为 *ThreadLocal.ThreadLocalMap* 的实例变量 *threadLocals*，也就是说每个线程有一个自己的 *ThreadLocalMap*。

*ThreadLocalMap* 有自己的独立实现，可以简单地将它的 *key* 视作 *ThreadLocal*，*value* 为代码中放入的值（实际上 *key* 并不是 *ThreadLocal* 本身，而是它的一个 *弱引用*）。

每个线程在往 *ThreadLocal* 里放值的时候，都会先获取当前线程的 *ThreadLocalMap*，然后往自己的 *ThreadLocalMap* 里存，读也是以 *ThreadLocal* 作为引用，在自己的 *map* 里找对应的 *key*，从而实现了 *线程隔离*。

我们还要注意 *Entry*， 它的 *key* 是 *ThreadLocal<?> k* ，继承自 *WeakReference*， 也就是我们常说的 *弱引用类型*。

threadLocalMap的结构图如下：

image::threadLocalMap结构.awebp[]


==== ThreadLocal内存泄漏问题

* 为什么ThreadLocalMap中的Entry要继承WeakReference，使ThreadLocal作为一个弱引用呢？

&emsp;&emsp;我们知道，弱引用在发生GC时这个对象一定会被回收。通常来说使用弱引用是为了避免内存泄漏。这里也不例外，ThreadLocal使用弱引用可以避免内存泄漏问题的发生。

&emsp;&emsp;试想，如果将ThreadLocal声明为强引用，一旦ThreadLocal不再使用，就需要被回收。但是此时由于ThreadLocalMap中的Entry数组持有了ThreadLocal。导致ThreadLocal不能够被回收而出现内存泄漏。那么，如果将ThreadLocal声明为弱引用就可以避免这一问题的出现。

* 为什么需要及时的调用 ThreadLocal.remove() 方法呢？

image::threadLocal的引用链.awebp[]

&emsp;&emsp;如上图所示，在ThreadLocal中存在一个这样的引用连。如果Thread一直在运行，那么此时由于强引用的value不能被回收，故此种情况下也可能出现内存泄漏的问题。



==== ThreadLocal父子线程数据传递方案

===== 子线程能否直接拿到父线程ThreadLocal中的值？

*答案：不能*

由于ThreadLocal的实现机制，在子线程中调用get时，我们拿到的Thread对象是当前子线程对象，所以在调用 get 方法时，得到的是 null。

===== InheritableThreadLocal

既然我们在子线程中不能通过 *ThreadLocal* 的 *get()* 直接获取到父线程中的值，那么有什么办法去解决这样的问题呢，毕竟有时候我们又有这样的需求。答案就是使用 *InheritableThreadLocal*。

先说一下 *InheritableThreadLocal* 的原理：

. *InheritableThreadLocal* 是 *ThreadLocal* 的子类，在创建 *InheritableThreadLocal* 对象的时候，会将  *ThreadLocalMap* 赋值给 *Thread* 中的 *inheritableThreadLocals* 属性；
. 在创建新线程的时候会检查父线程中 *inheritableThreadLocals* 变量是否为 *null*，如果不为 *null* 则 *copy* 一份 *ThradLocalMap* 到子线程的 *inheritableThreadLocals* 成员变量中去（Thread中的init方法）。
. 因为覆写了 *getMap(Thread)* 和 *CreateMap()* 方法，所以 *get* 的时候，就可以在 *getMap(t)* 的时候就会从 *inheritableThreadLocals* 中拿到 *map* 对象（可以看下面的源码），从而实现了可以拿到父线程 *ThreadLocal* 中的值。


*InheritableThreadLocal的源码：*
[source, java]
----
public class InheritableThreadLocal<T> extends ThreadLocal<T> {
    /**
     * Computes the child's initial value for this inheritable thread-local
     * variable as a function of the parent's value at the time the child
     * thread is created.  This method is called from within the parent
     * thread before the child is started.
     * <p>
     * This method merely returns its input argument, and should be overridden
     * if a different behavior is desired.
     *
     * @param parentValue the parent thread's value
     * @return the child thread's initial value
     */
    protected T childValue(T parentValue) {
        return parentValue;
    }

    /**
     * Get the map associated with a ThreadLocal.
     *
     * @param t the current thread
     */
    ThreadLocalMap getMap(Thread t) {
       return t.inheritableThreadLocals;
    }

    /**
     * Create the map associated with a ThreadLocal.
     *
     * @param t the current thread
     * @param firstValue value for the initial entry of the table.
     */
    void createMap(Thread t, T firstValue) {
        t.inheritableThreadLocals = new ThreadLocalMap(this, firstValue);
    }
}
----


==== InheritableThreadLocal和线程池之间的问题




=== Spring Boot构造流程

Spring Boot 的启动代码非常简单，只有简单的几行代码，如下图：

image::springboot启动入口类代码.png[]

从上面的Spring Boot启动入口代码来看，Spring Boot通过调用 *SpringApplication* 的静态方法 *run* 方法来启动。我们点进 run 方法的源码看一下，如下图：

image::springboot的run方法.png[]

看了以上这两个 *run* 方法，可以看出，最后是创建了一个 *SpringApplication* 的对象，然后执行了这个对象的 *run* 方法。因此，我们的启动入口程序也可以写成：

[source, java]
----
@SpringBootApplication
public class SpringOauthApplication {
    public static void main(String[] args) {
        new SpringApplication(SpringOauthApplication.class).run(args);
    }
}
----

==== SpringApplication 实例化流程

现在我们知道要启动Spring Boot项目，首先需要实例化一个 *SpringApplication* 对象，那么接下来，我们看一下 *SpringApplication* 实例化的过程中具体做了什么操作，源码如下：

image::springboot的springapplication实例化.png[]

通过源码分析，我们用一张图来直观的表示 SpringApplication 实例化过程所做的事情，如下图：

image::springboot中的springApplication实例化流程图.png[]

从上图我们可以看出，在 SpringApplication 对象实例化的过程中主要做了 3 件事情：*参数赋值给成员变量，应用类型及方法推断和ApplicationContext相关内容加载及实例化*。


===== 参数赋值给成员变量

SpringApplication 核心构造方法有两个参数，第一个是 *ResourceLoader resourceLoader*，第二个是 *Class<?>... primarySources*。

*ResourceLoader* 是资源加载的接口。

*primarySources* 是一个可变参数，用来指定项目的启动类，此参数传入的类需要满足一个必要条件，那就是被注解 *@EnableAutoConfiguration* 标注（*@ApringBootApplication* 中包含此注解），一般情况下，我们的入口类会被指定为启动类。

===== 推断Web应用类型

在完成成员变量赋值以后，就会通过 *WebApplicationType.deduceFromClasspath()* 方法推断Web应用类型。该方法主要通过判断指定的类是否存在于 *classpath* 下，并根据判断结果来进行组合推断该应用属于什么Web类型。

===== ApplicationContextInitializer加载

*ApplicationContextInitializer* 是Spring IOC 容器提供的一个接口，它是一个回调接口，主要目的是允许用户在 *ConfigurableApplicationContext* 类型（或其子类型）的 *ApplicationContext* 做 *refresh* 方法调用刷新前，对 *ConfigurableApplicationContext* 实例做进一步的设置或处理。通常用于应用程序上下文进行编程初始化的Web应用程序中。

ApplicationContextInitializer 接口只定义了一个 *initialize* 方法，代码如下：

[source, java]
----
@FunctionalInterface
public interface ApplicationContextInitializer<C extends ConfigurableApplicationContext> {
    void initialize(C applicationContext);
}
----

ApplicationContextInitializer 接口的 initialize 方法主要是为了初始化指定的应用上下文。而对应的上下文由参数传入，参数为 *ConfigurableApplicationContext* 的子类。

从 SpringApplication 初始化的源码可以看出，在 *ApplicationContextInitializer* 实例化的时候，先是通过 *getSpringFactoriesInstances* 方法获取实例，然后通过 *setInitializers* 方法设置实例。

*getSpringFactoriesInstances* 方法获取实例的时候是依然是通过 *SringFactoriesLoader* 类的 *loadFactoryNames* 方法，获取 *META-INF/spring.factories* 文件中注册的对应的配置。获取到实例之后，会进行初始化操作，并返回创建好的实例集合。代码如下图：

image::ApplicationContextInitializer加载和初始化.png[]

*setInitializers* 方法会把获取到的 *ApplicationContextInitializer* 实例集合添加到 *SpringApplication* 的成员变量 *initializers* 中。代码如下图：

image::SpringApplication中的setInitializers方法.png[]


===== ApplicationListener加载

完成了 ApplicationContextInitializer 的加载后，就会进行 ApplicationListener 的加载。它的常见应用场景为：当容器初始化完成之后，需要处理一些 *数据的加载、初始化缓存、特定任务的注册* 等操作。而在此阶段，更多的是 *用于 ApplicationContext 管理 Bean 过程* 的场景。

Spring 事件传播机制是基于观察者模式（Observer）实现的。比如，在 ApplicationContext 管理 Bean 生命周期的过程中，会将一些改变（或者行为）定义为事件（ApplicationEvent）。ApplicationContext 通过 ApplicationListener 监听 ApplicationEvent，当事件被发布之后（即 ApplicationContext 调用 publishEvent 方法），ApplicationListener 用来对事件做出具体的操作。

ApplicationListener 的整个配置和加载流程和 *ApplicationContextInitializer* 的加载一样，读取 *META-INF/spring.factories* 文件中注册的对应的配置。

===== 入口类推断

创建 SpringApplication 的最后一步便是推断入口类。




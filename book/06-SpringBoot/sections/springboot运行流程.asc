=== Spring Boot运行流程

在完成了 SpringApplication 的实例化之后，就会执行 SpringApplication 实例的 *run()* 方法，即真正的开始 Spring Boot 的启动和运行。首先，我们先通过一张流程图来认识一下 *run()* 方法的核心操作。如下图：

image::springApplication的run方法流程图.png[]

从上面的流程图可以看出，SpringApplication 在 run 方法中重点做了以下操作：

- 获取监听器和参数配置
- 打印Banner信息
- 创建并初始化容器
- 发送监听器通知

当然，除了以上的这些核心操作以外，run 方法运行过程中还涉及到启动时长统计、异常报告、启动日志、异常处理等辅助操作。

对照流程图，接下来，我们具体的看一下 run 方法的源码，如下图：

image::springboot运行流程run方法源码.png[]

从源码中，我们可以更加清晰的认识到 run 方法所做的事情，并且其中的核心操作被标注了出来。


==== SpringApplicationRunListener监听器

===== 监听器的配置与加载

让我们跳过Spring Boot的计时和统计的辅助功能，直接来看 *SpringApplicationRunListeners* 的获取和使用。

*SpringApplicationRunListeners* 可以理解为一个 *SpringApplicationRunListener* 的容器，它将 *SpringApplicationRunListener* 的集合赋值给 *SpringApplicationRunListeners* 的 *listeners* （成员变量）。SpringApplication 中 *getRunListeners* 方法如下图：

image::springApplication的getRunListeners方法源码.png[]

从上图中的源码，我们可以看出，*SpringApplicationRunListeners* 的构造方法的第二个参数是调用的 *getSpringFactoriesInstances* 方法，该方法会返回 *SpringApplicationRunListener* 的实例集合，具体源码如下图：

image::获取SpringApplicationRunListener的实例集合.png[]

通过这段源码可以看出，*SpringApplicationRunListener* 的实例配置也是从 *META-INF/spring.factories* 中获取的。


===== SpringApplicationRunListener 源码解析

接口 *SpringApplicationRunListener* 是 SpringApplication 的 run 方法的监听器。该接口提供了一系列的方法，用户可以通过调用这些方法，在启动各个流程时加入指定的逻辑处理。下面我们通过源码和注释来了解一下该接口定义的方法以及方法的功能。如下图：

image::SpringApplicationRunListener接口源码.png[]

通过上方的源码我们可以看出，*SpringApplicationRunListener* 为 run 方法提供了各个运行阶段的监听事件处理功能。接下来我们通过一张图，展示出每个监听方法所处的位置，便于我们理解和加深记忆。

image::run方法中springApplicaitonRunListener位置.png[]



===== 实现类 EventPublishingRunListener

*EventPublishingRunListener* 是 Spring Boot 中针对 *SpringApplicationRunListener* 接口的唯一实现。

*默认情况下，Spring Boot 在初始化过程中触发的事件也是交给 EventPublishingRunListener 来代理实现的。*

接下来看一下 *EventPublishingRunListener* 的构造方法源码：

[source, java]
----
public class EventPublishingRunListener implements SpringApplicationRunListener, Ordered {

	private final SpringApplication application;

	private final String[] args;

	private final SimpleApplicationEventMulticaster initialMulticaster;

	public EventPublishingRunListener(SpringApplication application, String[] args) {
        // 成员变量赋值，SpringApplication
		this.application = application;
		this.args = args;
        // 创建 SimpleApplicationEventMulticaster 广播器
		this.initialMulticaster = new SimpleApplicationEventMulticaster();
        // 遍历 SpringApplication 初始化的时候实例化的 ApplicationListener 集合
        // 并把这些监听器添加到 广播器中
		for (ApplicationListener<?> listener : application.getListeners()) {
			this.initialMulticaster.addApplicationListener(listener);
		}
	}

    // 省略的代码
    ...
}
----

看了 *EventPublishingRunListener* 构造方法源码后，接下来我们看一下在 EventPublishingRunListener 中事件的处理流程到底是怎样的。

EventPublishingRunListener 中事件的处理流程如下图：









[[Import注解]]

==== @Import注解

参考文章： https://zhuanlan.zhihu.com/p/147025312[Spring全解系列 - @Import注解]

> > 加载解析@Import注解位于  BeanFactoryPostProcessor （这个接口的作用在 <<容器背后的秘密>> 有讲到）处理的时候。

*@Import* 是Spring基于 Java 注解配置的主要组成部分。@Import 的作用和xml 配置文件里的<import>标签一样，下面是该注解提供的几个作用：

. 通过 @Import 引入被 @Configuration 注解的类

. 通过 @Import 导入普通的类（将其注册为 Bean，但是需要 Spring 4.2 以上版本）

. 导入实现了 ImportSelector（或者 DefferredImportSelector）接口的类

. 导入实现了 ImportBeanDefinitionRegistrar 接口的类

下面分别说明 *@Import* 注解的功能。

.*1. 通过 @Import 引入被 @Configuration 注解的类*
假设有如下的接口和两个实现类：

[source, java]
----
interface ServiceInterface {
    void test();
}

class ServiceA implements ServiceInterface {
    @Override
    public void test() {
        System.out.println("ServiceA");
    }
}

class ServiceB implements ServiceInterface {
    @Override
    public void test() {
        System.out.println("ServiceB");
    }
}
----

两个被 @Configuration 注解的类，其中 ConfigA 上有 @Import(ConfigB.class) 注解

[source, java]
----
@Import(ConfigB.class)
@Configuration
class ConfigA {
    @Bean
    @ConditionalOnMissingBean
    public ServiceInterface getServiceA() {
        return new ServiceA();
    }
}

@Configuration
class ConfigB {
    @Bean
    @ConditionalOnMissingBean
    public ServiceInterface getServiceB() {
        return new ServiceB();
    }
}
----

通过 ConfigA 创建 AnnotationConfigApplicationContext，获取 ServiceInterface，看是哪种实现：

[source, java]
----
public static void main(String[] args) {
    ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigA.class);
    ServiceInterface bean = ctx.getBean(ServiceInterface.class);
    bean.test();
}
----

上面的代码最终输出为 `ServiceB`，*证明 @Import 的优先于本身的的类定义加载*。


.*2. 通过 @Import 导入普通的类*

在Spring 4.2之后，*@Import 可以直接指定实体类，加载这个类定义到 Bean 到容器上下文中*。 例如把上面代码中的 `ConfigA` 的 `@Import` 修改为 `@Import(ServiceB.class)`，就会生成 ServiceB 的 Bean 到容器上下文中，之后运行main方法，输出为：ServiceB, *证明@Import的优先于本身的的类定义加载*。


.*3. 导入实现了 ImportSelector（或者 DefferredImportSelector）接口的类，用于个性化加载*

@Import 的许多功能都需要借助接口 ImportSelector 来实现，ImportSelector 决定可引入哪些 @Configuration。下面是 ImportSelector 接口的源码。

[source, java]
----
public interface importSelector {
    String[] selectImports(AnnotationMetadata importingClassMetadata);
}
----

@Import 导入实现了 *ImportSelector* 接口的类，g该接口提供了一个参数为 *AnnotationMetadata* 方法，参数 *AnnotationMetadata* 内包含了被 *@Import* 注解的类的 *注解信息*，返回要加载的 *@Configuation* 或者 *具体Bean类* 的全限定名的String数组（即要被实例化为 Bean 的类的全限定名的数组）。*如果 @Import 所在类是注解类，则延伸至应用这个注解类的非注解类为止*。

[source, java]
----
class ServiceImportSelector implements ImportSelector {
    @Override
    public String[] selectImports(AnnotationMetadata importingClassMetadata) {
        //可以是@Configuration注解修饰的类，也可以是具体的Bean类的全限定名称
        // "**.**.ConfigB" 是ConfigB这个类的全限定名
        return new String[]{"**.**.ConfigB"};
    }
}

@Import(ServiceImportSelector.class)
@Configuration
class ConfigA {
    @Bean
    @ConditionalOnMissingBean
    public ServiceInterface getServiceA() {
        return new ServiceA();
    }
}
----

再次运行main方法，输出：`ServiceB`。

一般情况下，框架中如果基于 *AnnotationMetadata* 的参数实现动态加载类，一般会写一个额外的Enable注解，配合使用。如下代码，我们对 *ImportSelector* 接口的实现类稍作修改：

[source, java]
----
class ServiceImportSelector implements ImportSelector {
    @Override
    public String[] selectImports(AnnotationMetadata importingClassMetadata) {
        // 这里的 AnnotationMetadata 参数针对的是被 @EnableService 注解的的非注解类（即ConfigA）
        // 如果 @Import 所在类是注解类，则延伸至应用这个注解类的非注解类为止
        Map<String , Object> map = 
            importingClassMetadata.getAnnotationAttributes(EnableService.class.getName(), true);
        String name = (String) map.get("name");
        if (Objects.equals(name, "B")) {
            return new String[]{"**.**.ConfigB"};
        }
        return new String[0];
    }
}
----

定义一个注解类：

[source, java]
----
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Target(ElementType.TYPE)
@Import(ServiceImportSelector.class)
@interface EnableService {
    String name();
}
----

之后，在 ConfigA中增加注解 @EnableService(name = "B")

[source, java]
----
@EnableService(name = "B")
@Configuration
class ConfigA {
    @Bean
    @ConditionalOnMissingBean
    public ServiceInterface getServiceA() {
        return new ServiceA();
    }
}
----

再次运行main方法，输出：`ServiceB`。


*DefferredImportSelector* 是 *ImportSelector* 的子接口，所以都可以用于个性化加载，这两个接口的区别在于，*DefferredImportSelector* 接口会在所有被 @Configuration 注解的类加载完成之后再加载返回的配置类，而 *ImportSelector* 接口实在加载完被 @Configuration 注解的类之前先去加载返回的配置类。例如：

[source, java]
----
class DefferredServiceImportSelector implements DeferredImportSelector {
    @Override
    public String[] selectImports(AnnotationMetadata importingClassMetadata) {
        // 这里的 AnnotationMetadata 参数针对的是被 @EnableService 注解的的非注解类（即ConfigA）
        // 如果 @Import 所在类是注解类，则延伸至应用这个注解类的非注解类为止
        Map<String , Object> map = importingClassMetadata.getAnnotationAttributes(EnableService.class.getName(), true);
        String name = (String) map.get("name");
        if (Objects.equals(name, "B")) {
            return new String[]{"**.**.ConfigB"};
        }
        return new String[0];
    }
}
----

修改 `EnableService` 注解：

[source, java]
----
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Target(ElementType.TYPE)
@Import(DefferredServiceImportSelector.class)
@interface EnableService {
    String name();
}
----

执行main方法，输出：`ServiceA`，因为 实现 *DeferredImportSelector* 接口的类，是在被 @Configuration 注解的类加载完之后才返回的，所以 ConfigA 就优先于DefferredServiceImportSelector 返回的 ConfigB 加载。








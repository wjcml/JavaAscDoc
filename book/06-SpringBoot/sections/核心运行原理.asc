=== Spring Boot核心运行原理

在使用 Spring Boot 时，我们只需要引入对应的 Starters，Spring Boot 启动时便会自动加载相关依赖，配置相应的初始化参数，以最快捷，简单的形式对第三方软件进行集成，这便是 Spring Boot 的自动配置功能。

下图是 Spring Boot 实现运作机制涉及的核心部分：

image::spring_boot自动配置功能核心运行原理图.png[]

在上图中，我们可以看到 Spring Boot 自动配置功能运作过程中设计的几个核心功能及相互之间的关系包括 *@EnableAutoConfiguration*，*spring.factories*，各组件对应的 *AutoConfiguration* 类，*@Conditional* 注解以及各种 Starters。

用一句话来描述这个过程：Spring Boot 通过 *@EnableAutoConfiguration* 注解开启自动配置，加载 *spring.factories* 中注册的各种 *AutoConfiguration* 类，当某个 *AutoConfiguration* 类满足其注解 *@Conditional* 指定的生效条件时，就实例化该 *AutoConfiguration* 类中定义的Bean（组件等），并注入Spring容器，就可以完成依赖框架的自动配置。

这写对应部分的作用及相互关系如下：

- *@EnableAutoConfiguration*：该注解由组合注解 *@SpringBootApplication* 引入，完成自动配置开启，扫描各个 jar 包下的 *spring.factories* 文件，并加载文件中注册的 *AutoConfiguration* 类等。

- *spring.factories*：配置文件，位于 jar 包的 META—INF 目录下，按照指定格式注册了自动配置的 *AutoConfiguration* 类。*spring.factories* 也可以包含其它类型待注册的类。该配置文件不仅仅存在于 Spring Boot 项目中，也可以存在于自定义的自动配置（或者 Starter）项目中。

- *AutoConfiguration* 类：自动配置类，代表了 Spring Boot 中一类以 **AutoConfiguration 命名的自动配置类。其中定义了三方组件集成 Spring 所需初始化的 Bean 和条件。

- *@Conditional*：条件注解及其衍生注解，在 AutoConfiguration 类上使用，当满足该条件时，才会实例化 AutoConfiguration 类。

- *Starters*：三方组件的依赖及配置，Spring Boot已经预置的组件。








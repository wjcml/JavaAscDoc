=== Spring IOC

==== 什么是IOC？
IoC（Inverse of Control:控制反转）是一种 *设计思想*，就是 *将原本在程序中手动创建对象的控制权，交由Spring框架来管理*。IoC 在其他语言中也有应用，并非 Spring 特有。 *IoC 容器是 Spring 用来实现 IoC 的载体*， *IoC 容器实际上就是个Map（key，value），Map 中存放的是各种对象*。

在不使用Spring IOC的情况下，如果我们依赖于某个类或服务，我们通常会使用 *new* 关键字直接创建对象。如下例子：

[source, java]
----
public class DoServiceImpl{
    private IUserService userService;
    private IRoleService roleService;

    public DoServiceImpl(){
        // new 方式创建对象
        userService = new UserServiceImpl();
        roleService = new RoleServiceImpl();
    }

    public void method1(){
        // do something
    }
}
----

采用以上方式，每次我们需要什么依赖对象都需要自己去手动创建，非常的不方便。在使用Sping IOC后，当我们需要某个依赖的时候，由IOC容器自动给我们送过来，这就很舒服。IOC的理念就是让别人为你服务。

*将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入*。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 *IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的*。 


==== Spring依赖注入的三种方式
在Spring中，提供了三种依赖注入的方式：*构造方法注入*，*setter方法注入*，*接口注入*。

===== 构造方法注入
IoC Service Provider会检查 *被注入对象的构造方法*，取得它所 *需要的依赖对象列表*，进而为其注入相应的对象。同一个对象是不可能被构造两次的，因此，被注入对象的构造乃至其整个生命周期，应该是由IoC Service Provider来管理的。

*构造方法注入方式比较直观，对象被构造完成后，即进入就绪状态，可以马上使用*。

[source, java]
----
public class DoServiceImpl{
    private IUserService userService;
    private IRoleService roleService;

    // ioc 会检查构造器需要的依赖对象，然后注入
    public DoServiceImpl(UserServiceImpl userServiceImpl, RoleServiceImpl roleServiceImpl){
        userService = userServiceImpl;
        roleService = roleServiceImpl;
    }

    public void method1(){
        // do something
    }
}
----


===== setter方法注入
在java中，通常是通过每个属性的setter和getter方法设置和访问对应属性的。

[source, java]
----
public class DoServiceImpl{
    private IUserService userService;

    public void setUserService(IUserService userService){
        this.userService = userService;
    }

    public IUserService getUserService(){
        return this.userService;
    }
}
----

看上边的代码，这样，外界就可以通过 *setUserService(IUserService userService)* 方法为 *DoServiceImpl* 注入所需要的依赖对象了。


===== 接口注入
接口注入的实现比较复杂，被注入对象如果想要IoC Service Provider为其注入依赖对象，就 *必须实现某个接口*。*这个接口提供一个方法，用来为其注入依赖对象*。*IoC Service Provider最终通过这些接口来了解应该为被注入对象注入什么依赖对象*。

image::spring_ioc接口注入图.png[]

DoServiceImpl为了让IOC容器为其注入所依赖的对象IUserService首先需要实现IDoService接口，这个接口会声明一个injectUserService的一个方法（方法名随意），该方法的参数就是所依赖的对象，这样IOC容器就可以通过这个接口方法将依赖对象注入到DoServiceImpl中。


===== 三种注入方式比较
*构造方法注入*：这尊重方式注入优点就是，对象在构造方法完成之后，就进入了就绪状态，可以马上使用。但是无法设置默认值。

*setter方法注入*：允许设置默认值，setter方法注入不像构造方法那样，让对象构造完成后就可以马上使用，但是相对来说宽松一些，可以在 *对象构造完成后再注入*。

*接口注入*：因为这种方式必须要求实现一个接口，代码带有侵入性，所以现在不提倡使用这种方式。


==== Spring IOC容器简述
Spring的IoC容器是一个IoC Service Provider（直译：IOC服务提供者）,Spring提供了两种容器类型：*BeanFactory* 和 *ApplicationContext*。

*BeanFactory*：基础类型IoC容器，提供完整的IoC服务支持。如果没有特殊指定，默认采用 *延迟初始化策略（lazy-load）*。*只有当客户端对象需要访问容器中的某个受管对象的时候，才对该受管对象进行初始化以及依赖注入操作*。所以，相对来说，*容器启动初期速度较快*，所需要的资源有限。对于资源有限，并且功能要求不是很严格的场景，BeanFactory是比较合适的IoC容器选择。

*ApplicationContext*：*ApplicationContext在BeanFactory的基础上构建*，是相对比较高级的容器实现，除了 *拥有BeanFactory的所有支持*，ApplicationContext还提供了其他高级特性，比如事件发布、国际化信息支持等，这些会在后面详述。*ApplicationContext所管理的对象，在该类型容器启动之后，默认全部初始化并绑定完成*。所以，相对于BeanFactory来说，ApplicationContext要求更多的系统资源，同时，*因为在启动时就完成所有初始化，容器启动时间较之BeanFactory也会长一些*。在那些系统资源充足，并且要求更多功能的场景中，ApplicationContext类型的容器是比较合适的选择。

通过下图，我们可以对BeanFactory和ApplicationContext之间的关系有一个更清晰的认识。

image::spring_beanfactory_applicationContext关系图.png[]

> > ApplicationContext间接继承自BeanFactory，所以说它是构建于BeanFactory之上的IoC容器。


==== BeanFactory
BeanFactory，顾名思义，就是生产Bean的工厂。作为Spring提供的基本的IoC容器，BeanFactory可以完成作为IoC Service Provider的所有职责，包括 *业务对象的注册* 和 *对象间依赖关系的绑定*。

===== BeanFactory的对象注册与依赖绑定方式

====== 直接编码方式
> > 其实，把编码方式单独提出来称作一种方式并不十分恰当。因为不管什么方式，最终都需要编码才能“落实”所有信息并付诸使用。不过，通过这些代码，起码可以让我们更加清楚BeanFactory在底层是如何运作的。

[source, java]
----
public static void main(String[] args){
    DefaultListableBeanFactory beanRegistry = new DefaultListableBeanFactory();
    BeanFactory container = (BeanFactory)bindViaCode(beanRegistry);
    FXNewsProvider newsProvider = 
    (FXNewsProvider)container.getBean("djNewsProvider");
    newsProvider.getAndPersistNews();
}

public static BeanFactory bindViaCode(BeanDefinitionRegistry registry)
{
    AbstractBeanDefinition newsProvider = 
    new RootBeanDefinition(FXNewsProvider.class,true);
    AbstractBeanDefinition newsListener = 
    new RootBeanDefinition(DowJonesNewsListener.class,true);
    AbstractBeanDefinition newsPersister = 
    new RootBeanDefinition(DowJonesNewsPersister.class,true);
    // 将bean定义注册到容器中
    registry.registerBeanDefinition("djNewsProvider", newsProvider);
    registry.registerBeanDefinition("djListener", newsListener);
    registry.registerBeanDefinition("djPersister", newsPersister);
    // 指定依赖关系
    // 1. 可以通过构造方法注入方式
    ConstructorArgumentValues argValues = new ConstructorArgumentValues();
    argValues.addIndexedArgumentValue(0, newsListener);
    argValues.addIndexedArgumentValue(1, newsPersister);
    newsProvider.setConstructorArgumentValues(argValues);
    // 2. 或者通过setter方法注入方式
    // MutablePropertyValues propertyValues = new MutablePropertyValues();
    // propertyValues.addPropertyValue(new ropertyValue("newsListener",newsListener));
    // propertyValues.addPropertyValue(new PropertyValue("newPersistener",newsPersister));
    // newsProvider.setPropertyValues(propertyValues);

    // 绑定完成
    return (BeanFactory)registry;
}
----

NOTE:: 小心 最后一行的强制类型转换是有特定场景的。因为传入的DefaultListableBeanFactory同时实现了BeanFactory和BeanDefinitionRegistry接口，所以，这样做强制类型转换不会出现问题。

*BeanFactory只是一个接口*，我们最终需要一个 *该接口的实现* 来进行实际的Bean的管理，*DefaultListableBeanFactory* 就是这么一个比较通用的 BeanFactory实现类 。*DefaultListableBeanFactory* 除了间接地实现了 *BeanFactory* 接口，还实现了 *BeanDefinitionRegistry* 接口，*该接口才是在BeanFactory的实现中担当Bean注册管理的角色*。基本上，BeanFactory接口只定义如何访问容器内管理的Bean的方法，*各个 BeanFactory 的具体实现类负责具体Bean的注册以及管理工作*。*BeanDefinitionRegistry接口定义抽象了Bean的注册逻辑*。通常情况下，*具体的BeanFactory实现类会实现这个接口来管理Bean的注册*。下图是它们之间的关系：

image::beanfactory实现类关系图.png[]

每一个受管的对象，在容器中都会有一个 *BeanDefinition的实例* 与之相对应，该BeanDefinition的实例 *负责保存对象的所有必要信息*，包括其对应的对象的class类型、是否是抽象类、构造方法参数以及其他属性等。*当客户端向BeanFactory请求相应对象的时候，BeanFactory会通过这些信息为客户端返回一个完备可用的对象实例*。



====== 外部配置文件方式（重要）
*Spring的IoC容器支持两种配置文件格式：Properties文件格式和XML文件格式。*
> > 下面这段话，是Spring的核心点，很重要，也可以称之为Spring加载Bean的过程

采用外部配置文件时，Spring的IoC容器有一个统一的处理方式。通常情况下，需要根据不同的外部配置文件格式，给出相应的 *BeanDefinitionReader实现类*，由 *BeanDefinitionReader的相应实现类* 负责将相应的配置文件内容读取并映射到 *BeanDefinition*，然后将映射后的 *BeanDefinition* 注册到一个 *BeanDefinitionRegistry* 中，这样，BeanDefinitionRegistry就完成了Bean的注册和加载，这时，整个BeanFactory就可以放给客户端使用了。当然，大部分工作，包括解析文件格式、装配BeanDefinition之类的工作，都是由 *BeanDefinitionReader的相应实现类* 来做的， *BeanDefinitionRegistry只不过负责保管而已*。


====== 注解方式
通过 *@Component* 或者 *@Bean* 实现Bean的注册和绑定。







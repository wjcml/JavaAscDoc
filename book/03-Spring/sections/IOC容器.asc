=== Spring IOC

==== 什么是IOC？
IoC（Inverse of Control:控制反转）是一种 *设计思想*，就是 *将原本在程序中手动创建对象的控制权，交由Spring框架来管理*。IoC 在其他语言中也有应用，并非 Spring 特有。 *IoC 容器是 Spring 用来实现 IoC 的载体*， *IoC 容器实际上就是个Map（key，value），Map 中存放的是各种对象*。

在不使用Spring IOC的情况下，如果我们依赖于某个类或服务，我们通常会使用 *new* 关键字直接创建对象。如下例子：

[source, java]
----
public class DoServiceImpl{
    private IUserService userService;
    private IRoleService roleService;

    public DoServiceImpl(){
        // new 方式创建对象
        userService = new UserServiceImpl();
        roleService = new RoleServiceImpl();
    }

    public void method1(){
        // do something
    }
}
----

采用以上方式，每次我们需要什么依赖对象都需要自己去手动创建，非常的不方便。在使用Sping IOC后，当我们需要某个依赖的时候，由IOC容器自动给我们送过来，这就很舒服。IOC的理念就是让别人为你服务。

*将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入*。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 *IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的*。 


==== Spring依赖注入的三种方式
在Spring中，提供了三种依赖注入的方式：*构造方法注入*，*setter方法注入*，*接口注入*。

===== 构造方法注入
IOC容器（IoC Service Provider）会检查 *被注入对象的构造方法*，取得它所 *需要的依赖对象列表*，进而为其注入相应的对象。同一个对象是不可能被构造两次的，因此，被注入对象的构造乃至其整个生命周期，应该是由IoC Service Provider来管理的。

*构造方法注入方式比较直观，对象被构造完成后，即进入就绪状态，可以马上使用*。

[source, java]
----
public class DoServiceImpl{
    private IUserService userService;
    private IRoleService roleService;

    // ioc 会检查构造器需要的依赖对象，然后注入
    public DoServiceImpl(UserServiceImpl userServiceImpl, RoleServiceImpl roleServiceImpl){
        userService = userServiceImpl;
        roleService = roleServiceImpl;
    }

    public void method1(){
        // do something
    }
}
----


===== setter方法注入
在java中，通常是通过每个属性的setter和getter方法设置和访问对应属性的。

[source, java]
----
public class DoServiceImpl{
    private IUserService userService;

    public void setUserService(IUserService userService){
        this.userService = userService;
    }

    public IUserService getUserService(){
        return this.userService;
    }
}
----

看上边的代码，这样，外界就可以通过 *setUserService(IUserService userService)* 方法为 *DoServiceImpl* 注入所需要的依赖对象了。


===== 接口注入
接口注入的实现比较复杂，被注入对象如果想要IoC Service Provider为其注入依赖对象，就 *必须实现某个接口*。*这个接口提供一个方法，用来为其注入依赖对象*。*IoC Service Provider最终通过这些接口来了解应该为被注入对象注入什么依赖对象*。

image::spring_ioc接口注入图.png[]

DoServiceImpl为了让IOC容器为其注入所依赖的对象IUserService首先需要实现IDoService接口，这个接口会声明一个injectUserService的一个方法（方法名随意），该方法的参数就是所依赖的对象，这样IOC容器就可以通过这个接口方法将依赖对象注入到DoServiceImpl中。


===== 三种注入方式比较
*构造方法注入*：这尊重方式注入优点就是，对象在构造方法完成之后，就进入了就绪状态，可以马上使用。但是无法设置默认值。

*setter方法注入*：允许设置默认值，setter方法注入不像构造方法那样，让对象构造完成后就可以马上使用，但是相对来说宽松一些，可以在 *对象构造完成后再注入*。

*接口注入*：因为这种方式必须要求实现一个接口，代码带有侵入性，所以现在不提倡使用这种方式。





=== 容器背后的秘密
在没有特别说明的情况下，以下描述以 *BeanFactory* 进行的分析，*ApplicationContext* 有一些不一样。

==== 容器功能实现阶段
Spring的IOC容器会以某种方式加载Configuration Metadata（通常也就是XML格式的配置信息），然后根据这些信息绑定整个系统的对象，最终组装成一个可用的基于轻量级容器的应用系统。

Spring的IOC容器实现以上功能的过程，基本上可以按照类似的流程划分为两个阶段，即 *容器启动阶段* 和 *Bean实例化阶段*。如下图所示：

image::spring_ioc容器功能实现的各个阶段.png[]

.*1. 容器启动阶段*

容器启动伊始，首先会通过某种途径加载 *Configuration MetaData*。除了代码方式比较直接，在大部分情况下，容器需要依赖某些工具类（*BeanDefinitionReader*）对加载的Configuration MetaData进行解析和分析，*并将分析后的信息映射为相应的BeanDefinition*，最后把这些保存了bean定义必要信息的BeanDefinition，*注册到相应的BeanDefinitionRegistry*，这样容器启动工作就完成了。

.*2. Bean实例化阶段*

经过第一阶段，现在 *所有的bean定义信息都通过BeanDefinition的方式注册到了BeanDefinitionRegistry中*。当某个请求方通过容器的 *getBean* 方法明确地请求某个对象，或者因依赖关系容器需要隐式地调用getBean方法时，就会触发第二阶段的活动。

该阶段，容器会 *首先检查所请求的对象之前是否已经初始化*。*如果没有，则会根据注册的BeanDefinition所提供的信息实例化被请求对象，并为其注入依赖*。如果该对象实现了某些回调接口，也会根据回调接口的要求来装配它。当该对象装配完毕之后，容器会立即将其返回请求方使用。如果说第一阶段只是根据图纸装配生产线的话，那么第二阶段就是使用装配好的生产线来生产具体的产品了。




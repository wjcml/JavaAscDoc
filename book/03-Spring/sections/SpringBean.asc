=== Spring Bean

==== Bean的作用域(scope)

*singleton*：该作用域的Bean，在Spring IOC容器中只有一个实例，将一直存活到容器退出，寿命和IOC容器一样长。

*prototype*：该作用域的Bean，每当 *容器* 在接到 *该类型对象的请求* 的时候，会每次都重新生成一个新的对象实例给请求方。

*request*：该作用域的Bean，每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP request内有效。

*session*：该作用域的Bean，Spring容器会为每个独立的session创建属于它们自己的全新的对象实例。与request相比，除了拥有session scope的bean的实例具有比request scope的bean可能更长的存活时间，其他方面真是没什么差别。

*global-session*：全局session作用域，仅仅在基于portlet的web应用中才有意义，Spring5已经没有了。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。


==== Spring中的单例Bean是线程安全的吗？

.*1. 介绍两个概念*
*有状态的 Bean*：对象中有实例变量（成员变量），可以保存数据，是非线程安全的。

*无状态的 Bean*：对象中没有实例变量（成员变量），不能保存数据，可以在多线程环境下共享，是线程安全的。

.*2. Spring中的单例Bean是线程安全问题*

我们都知道 Spring 中的 Bean 默认都是单例的，IOC 容器中一个类只会存在一个实例对象。这种设计是怎么保证线程安全的？

一般不会出现线程安全问题。在 Spring 中，绝大部分 Bean 都是无状态的，因此即使这些 Bean 默认是单例的，也不会出现线程安全问题的。比如 *Controller*、*Service*、*Dao* 这些类，这些类里面通常 *不会含有成员变量*，因此它们被设计成 *单例* 的。*如果这些类中定义了实例变量，就线程不安全了，所以尽量避免定义实例变量*。

.*3. 解决Spring单例Bean线程安全问题办法*
. 对于 *有状态的 Bean*，Spring 采用 ThreadLocal 进行处理，使它们成为线程安全可以共享的对象。

. 对于 *有状态的 bean*，也可以使用原型模式（prototype），每次使用时都会重新生成一个对象，解决了线程不安全的问题。

> > ps：无状态的 Bean 适合使用不变模式，即单例模式，这样可以共享实例，提高性能。有状态的 Bean，多线程环境下不安全，适合使用 Prototype 原型模式。Prototype: 每次对 Bean 的请求都会创建一个新的 bean 实例。


==== BeanFactory和FactoryBean的却别

*BeanFactory是个Factory*，也就是IOC容器或对象工厂，FactoryBean是个Bean。在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。*FactoryBean是个Bean*，这个Bean不是简单的Bean，而是一个 *能生产或者修饰对象生成的工厂Bean*。


===== FactoryBean
当某些对象的实例化过程过于烦琐，通过XML配置过于复杂，使我们宁愿使用Java代码来完成这个实例化过程的时候，或者，某些第三方库不能直接注册到Spring容器的时候，就可以实现 *org.springframework.beans.factory.FactoryBean* 接口，给出自己的对象实例化逻辑代码。

下面是 FactoryBean 接口源码，其中定义了三个方法：
[source, java]
----
public interface FactoryBean {
    Object getObject() throws Exception;
    Class getObjectType();
    boolean isSingleton();
}
----

. *getObject()* 方法会返回该FactoryBean“生产”的对象实例，我们需要实现该方法以给出自己的对象实例化逻辑。 + 
. *getObjectType()* 方法仅返回getObject()方法所返回的对象的类型，如果预先无法确定，则返回null。 + 
. *isSingleton()* 方法返回结果用于表明，工厂方法（getObject()）所“生产”的对象是否要以singleton形式存在于容器中。如果以singleton形式存在，则返回true，否则返回false。

我们现在实现一个 FactoryBean ，比如，如果我们想每次得到的日期都是第二天（该例子来自于《Spring揭秘--王福强》），代码如下：
[source, java]
----
import org.joda.time.DateTime;
import org.springframework.beans.factory.FactoryBean;

public class NextDayDateFactoryBean implements FactoryBean {
    public Object getObject() throws Exception {
        return new DateTime().plusDays(1);
    }
    public Class getObjectType() {
        return DateTime.class;
    }
    public boolean isSingleton() {
        return false;
    }
}
----

实现很简单，接下来要使用 NextDayDateFactoryBean ，下面是 XML 配置：
[source, xml]
----
<bean id="nextDayDateDisplayer" class="...NextDayDateDisplayer">
    <property name="dateOfNextDay">
        <ref bean="nextDayDate"/>
    </property>
</bean>

<bean id="nextDayDate" class="...NextDayDateFactoryBean">
</bean>
----

从上面的配置看不出和平常定义的Bean有什么不同，不要着急，下面再看一下NextDayDateDisplayer 的定义的时候，就可以看出 FactoryBean 的魔力在哪里。
[source, java]
----
public class NextDayDateDisplayer{
    private DateTime dateOfNextDay;
    // 相应的setter方法
    // ...
}
----

看到了嘛？ NextDayDateDisplayer所声明的依赖 dateOfNextDay 的类型为 DateTime，而不是NextDayDateFactoryBean。*也就是说FactoryBean类型的bean定义，通过正常的id引用，容器返回的是FactoryBean所“生产”的对象类型，而非FactoryBean实现类本身*。


=== Spring数据访问

==== 什么是JDBC？
JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。

使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。

[NOTE]
====
使用JDBC的好处是：

. 各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发；
. Java程序编译期仅依赖java.sql包，不依赖具体数据库的jar包；
. 可随时替换底层数据库，访问数据库的Java代码基本不变。
====

.JDBC查询
获取到JDBC连接后，下一步我们就可以查询数据库了。查询数据库分以下几步：

第一步，通过 *Connection* 提供的 *createStatement()* 方法创建一个 *Statement* 对象，用于执行一个查询；

第二步，执行 *Statement* 对象提供的 *executeQuery("SELECT * FROM students")* 并传入SQL语句，执行查询并获得返回的结果集，使用 *ResultSet* 来引用这个结果集；

第三步，反复调用 *esultSet* 的 *next()* 方法并读取每一行结果。

完整查询代码如下：

[source, java]
----
// JDBC连接的URL, 不同数据库有不同的格式:
String JDBC_URL = "jdbc:mysql://localhost:3306/test";
String JDBC_USER = "root";
String JDBC_PASSWORD = "password";

// try-with-resources
try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {
    try (Statement stmt = conn.createStatement()) {
        try (ResultSet rs = stmt.executeQuery("SELECT id, grade, name, gender FROM students WHERE gender=1")) {
            while (rs.next()) {
                long id = rs.getLong(1); // 注意：索引从1开始
                long grade = rs.getLong(2);
                String name = rs.getString(3);
                int gender = rs.getInt(4);
            }
        }
    }
}
----



==== 集成Hibernate
Hibernate是对JDBC的深度封装。

.SessionFactory
在Hibernate中，*SessionFactory* 是Hibernate最核心的一个对象，*SessionFactory* 中封装了 *JDBC DataSource的实例*，即 *SessionFactory* 持有连接池，每次需要操作数据库的时候，*SessionFactory* 创建一个新的 *Session*，*Session* 是封装了一个 *JDBC Connection* 的实例，相当于从连接池获取到一个新的 *Connection*。


==== 集成Mybatis
Mybatis是对JDBC的淺度封装，对用户的sql编写要求要高一些。





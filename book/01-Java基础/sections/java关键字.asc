=== java关键字

[cols="1,1,1,1,1,1,1,1"] 
.Java 中常见的关键字
|===
|访问控制|public|protected|default|private|||
|类，方法和变量修饰符|abstract|class|extends|final|implements|interface|native
||new|static|strictfp|synchronized|transient|volatile|
|程序控制|break|continue|return|do|while|if|else
||for|instanceof|switch|case|default||
|错误处理|try|catch|throw|throws|finally||
|包相关|import|package|||||
|基本类型|boolean|byte|char|double|float|int|long
||short|null|true|false|||
|变量引用|super|this|void||||
|保留字|goto|const|||||
|===


==== == 和 equals 区别？

对于 *基本数据类型* 来说，== 比较的是 *值*。对于 *引用数据类型* 来说，== 比较的是对象的 *内存地址*。

> > 因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。

*equals()方法存在于Object类中，而Object类是所有类的直接或间接父类*。

Object 类 equals() 方法：

[source, java]
----
public boolean equals(Object obj) {
     return (this == obj);
}
----

我们通常使用 equals() 方法有两种方式：

*重写了Object的equals()方法*： 重写之后，依据重写后的逻辑判定是否相等。比如：*String* 中的 equals() 方法被重写过，在 String 中，`equals()` 方法比较的是对象的值。

*没有重写Object的equals()方法*： 通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 Object 类 `equals()` 方法。即比较的是内存地址是否相等。


==== hashCode()与 equals()

面试官可能会问你：“你重写过 *hashCode* 和 *equals* 么，为什么重写 *equals* 时必须重写 *hashCode* 方法？”

.1. 什么是hashCode？
*hashCode* 是一个 *数值*，称作为散列数值。在Java中，通过 *hashCode()* 方法获取，该方法通常用来将对象的 *内存地址* 转换为整数之后返回。

.2. 为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？
*因为 hashCode() 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值*。越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode。

.3. 为什么重写 equals 时必须重写 hashCode 方法？

要解释这个问题，我们需要根据一个例子来解析，这样更加容易理解。比如：我们自定义了一个类 Cat，并创建一个 Map，使用这个类作为 key 的类型（即：Map<Cat, Object>），先看如下代码：

[source, java]
----
public class TestDemo {
    public static void main(String[] args){
        Cat cat = new Cat("red");

        HashMap<Cat, String> map = new HashMap<>();
        // 最终会输出null
        System.out.println(map.get(new Cat("red")));
    }
}

public class Cat {
    private String color;

    public Cat(String color) {
        this.color = color;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        return this.color.equals(((Cat) obj).color);
    }
}
----

输出结果：
```
null
```

如上面的例子，我们在 Cat 中只重写了 equals 方法，没有重写 hashCode 方法，最终导致 输出为 null。因为，在 hashMap 中查找的时候，会先比较 *对象的hashCode*，如果 hashCode 相等，才会比较对象是否相等。*如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等,对两个对象分别调用 equals 方法都返回 true。但是，两个对象有相同的 hashcode 值，它们也不一定是相等的*。

看一下 *HashMap* 中的插入和查询时做判断的源码：

[source, java]
----
if (p.hash == hash &&
                ((k = p.key) == key || (key != null && key.equals(k))))
----

可以看出，HashMap 先做了 hashCode 是否相等的判断，这样就理解比较清晰了。


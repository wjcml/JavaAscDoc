=== 基础数据类型

Java 中有 8 种基本数据类型：
----
6 种数字类型 ：byte、short、int、long、float、double
1 种字符类型：char
1 种布尔型：boolean
----

[cols="1,1,1,2,1,1,2", options="header"] 
.基本数据类型
|===
|基本类型
|位数
|字节
|范围
|默认值
|包装类型
|缓存范围

|byte
|8
|1
|-2^7 ~ 2^7-1
|0
|Byte
|[-128, 127]

|short
|16
|2
|-2^15 ~ 2^15-1
|0
|Short
|[-128, 127]

|int
|32
|4
|-2^31 ~ 2^31-1
|0
|Integer
|[-128, 127]

|long
|64
|8
|-2^63 ~ 2^63-1
|0L
|Long
|[-128, 127]

|float
|32
|4
|-2^31 ~ 2^31-1
|0.0f
|Float
|

|double
|64
|8
|-2^63 ~ 2^63-1
|0.0d
|Double
|

|boolean
|1
|
|
|false
|Boolean
|ture 和 false

|char
|16
|2
|0 ~ 2^16-1
|'u0000'
|Character
|[0, 127]
|===


==== 自动装箱与拆箱

- *装箱*：将基本类型用它们对应的引用类型包装起来；
- *拆箱*：将包装类型转换为基本数据类型；

==== 8 种基本类型的包装类和常量池

&emsp;&emsp;Java 基本类型的包装类的大部分都实现了常量池技术。*Byte*, *Short*, *Integer*, *Long* 这 4 种包装类默认创建了数值 *[-128，127]* 的相应类型的缓存数据，*Character* 创建了数值在 *[0,127]* 范围的缓存数据，*Boolean* 直接返回 *True* Or *False*。两种浮点数类型的包装类 *Float* , *Double* 并没有实现常量池技术。

如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。

包装类型不赋值就是 *Null* ，而基本类型 *有默认值* 且不是 *Null*。


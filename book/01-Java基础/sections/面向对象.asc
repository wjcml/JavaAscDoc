=== 面向对象

.1. 什么是对象？
----
一切事物皆对象
----

.2. 什么是类？
----
类就是具有相同属性和功能的对象的抽象的集合
----

.3. 什么是实例和实例化？
----
- 实例就是一个真实的对象
- 实例化就是创建对象的过程
- Cat cat = new Cat()，做了两件事：
    Cat cat：声明一个Cat的对象，对象名为cat
    cat = new Cat()：将此cat对象实例化
----

.4. 对象的相等与指向他们的引用相等,两者有什么不同?
----
对象的相等，比的是内存中存放的内容是否相等。
而引用相等，比较的是他们指向的内存地址是否相等。
----

.5. 什么是构造方法？
----
构造函数用于对类进行初始化
构造方法与类同名（*普通方法也可与类名同名*），无返回值，创建对象时自动调用
如果不写构造，系统默认生成空构造
构造函数不能被继承，不能被override（重写），可以被overload（重载）
子类可以通过 super() 来显示调用父类的构造函数
----

[NOTE]
构造方法不能被重写：因为 `重写是子类方法重写父类的方法，重写的方法名不变，而类的构造方法名必须与类名一致，假设父类的构造方法如果能够被子类重写则子类类名必须与父类类名一致才行，所以 Java 的构造方法是不能被重写的。`


.访问修饰符

image::修饰关键字.png[]


==== 面向对象的三大特征

.封装： 属性的封装和方法的封装
----
封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部
不允许外部对象直接访问对象的内部信息
对外提供方法来操作属性
----

.继承： 子类可以继承父类的成员变量和成员方法
----
子类拥有父类的非private的属性和方法
子类可以扩展父类没有的属性和功能
子类可以进行方法的重写
提高代码的复用性
----

.多态： 同样的行为有不同的表现形式，具体表现为父类的引用指向子类的实例。
----
如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。
----


==== 普通类、抽象类、接口

.普通类
----
普通类不能包含抽象方法
普通类可以直接实例化
----

.抽象类
----
抽象类可以包含抽象方法
抽象类不能直接实例化

使用abstract关键字修饰的方法是抽象方法,没有方法体。子类必须重写这些抽象方法
抽象类中可以只包含非抽象方法，即抽象类可以给出一些方法的实现

包含抽象方法的类,一定是抽象类
抽象类只能被继承,一个类只能继承一个抽象类
----

.接口
----
全部的方法都是抽象方法,属性都是常量
不能实例化,可以定义变量。
接口只能被实现,一个具体类实现接口,必须实现全部的抽象方法
接口之间可以多实现
一个具体类可以实现多个接口,实现多继承现象
----





